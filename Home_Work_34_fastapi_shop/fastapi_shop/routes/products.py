

# routes/products.py
from fastapi import APIRouter, HTTPException, Path, Query, BackgroundTasks
from typing import List, Optional, Dict # –î–æ–±–∞–≤–ª–µ–Ω Dict
# –ò–º–ø–æ—Ä—Ç—ã —Å—Ö–µ–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
from schemas.product import Product
from schemas.product_create import ProductCreate
# –ò–º–ø–æ—Ä—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from data.products import products
from utils.helpers import get_next_id
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from utils.telegram import send_telegram_message

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä APIRouter —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ —Ç–µ–≥–∞–º–∏
router = APIRouter(
    prefix="/products",
    tags=["Products"]
)

# --- READ (List) ---
@router.get(
    path="/",
    response_model=List[Product],
    status_code=200,
    summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
)
async def get_products(
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é"),
    currency: Optional[str] = Query(None, description="–í–∞–ª—é—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (shmeckles, credits, flurbos)"),
    sort_order: Optional[str] = Query(None, description="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (asc, desc)")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–µ–∫—Å—Ç—É –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ü–µ–Ω–µ.
    """
    result = products

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    if search:
        result = [
            product for product in result
            if search.lower() in product["name"].lower()
            or search.lower() in product["description"].lower()
        ]

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if currency and sort_order:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        if any(currency in product["prices"] for product in result):
            reverse = sort_order.lower() == "desc"
            try:
                result = sorted(
                    result,
                    key=lambda p: p["prices"].get(currency, float('-inf')), # –ò—Å–ø–æ–ª—å–∑—É–µ–º -inf, –µ—Å–ª–∏ —Ü–µ–Ω—ã –Ω–µ—Ç
                    reverse=reverse
                )
            except TypeError:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ü–µ–Ω—ã –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
        else:
            # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
            result = []

    return result


# --- READ (One) ---
@router.get(
    path="/{product_id}",
    response_model=Product,
    status_code=200,
    summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID",
)
async def get_product(
    product_id: int = Path(..., ge=1, description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –ø–æ –µ–≥–æ ID.
    """
    for product in products:
        if product["id"] == product_id:
            return product
    raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


# --- CREATE ---
@router.post(
    path="/",
    response_model=Product,
    status_code=201,
    summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
)
async def create_product(
    product_ ProductCreate, # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–º—è_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –¢–∏–ø
    background_tasks: BackgroundTasks # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    """
    new_id = get_next_id()
    new_product = {
        "id": new_id,
        **product_data.model_dump() # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ö–µ–º—ã –≤ —Å–ª–æ–≤–∞—Ä—å
    }
    products.append(new_product)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    message = f"""üÜï *–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç*

üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {new_product['name']}
üÜî *ID:* {new_product['id']}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {new_product['description'][:150]}...

üí∞ *–¶–µ–Ω—ã:*
  ‚Ä¢ –®–º–µ–∫–µ–ª–∏: {new_product['prices'].get('shmeckles', 'N/A')}
  ‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {new_product['prices'].get('credits', 'N/A')}
  ‚Ä¢ –§–ª—É—Ä–±–æ: {new_product['prices'].get('flurbos', 'N/A')}
"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    background_tasks.add_task(send_telegram_message, message)

    return new_product


# --- UPDATE ---
@router.put(
    path="/{product_id}",
    response_model=Product,
    status_code=200,
    summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
)
async def update_product(
    background_tasks: BackgroundTasks, # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–ø–µ—Ä–µ–¥ path –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    product_id: int = Path(..., ge=1, description="ID –ø—Ä–æ–¥—É–∫—Ç–∞"),
    product_ ProductCreate = None # FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ ProductCreate, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–º—è_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –¢–∏–ø = –∑–Ω–∞—á–µ–Ω–∏–µ_–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    """
    for i, product in enumerate(products):
        if product["id"] == product_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–≤ ID
            updated_product = {
                "id": product_id,
                **product_data.model_dump() # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
            products[i] = updated_product

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = f"""üîÑ *–û–±–Ω–æ–≤–ª—ë–Ω –ø—Ä–æ–¥—É–∫—Ç*

üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {updated_product['name']}
üÜî *ID:* {updated_product['id']}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {updated_product['description'][:150]}...

üí∞ *–¶–µ–Ω—ã:*
  ‚Ä¢ –®–º–µ–∫–µ–ª–∏: {updated_product['prices'].get('shmeckles', 'N/A')}
  ‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {updated_product['prices'].get('credits', 'N/A')}
  ‚Ä¢ –§–ª—É—Ä–±–æ: {updated_product['prices'].get('flurbos', 'N/A')}
"""
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            background_tasks.add_task(send_telegram_message, message)

            return updated_product

    raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


# --- DELETE ---
@router.delete(
    path="/{product_id}",
    status_code=204,
    summary="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
)
async def delete_product(
    product_id: int = Path(..., ge=1, description="ID –ø—Ä–æ–¥—É–∫—Ç–∞")
):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID.
    """
    for i, product in enumerate(products):
        if product["id"] == product_id:
            products.pop(i) # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            return # 204 No Content
    raise HTTPException(status_code=404, detail="–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
